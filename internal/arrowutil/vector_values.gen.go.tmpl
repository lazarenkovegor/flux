package arrowutil

import (
	"fmt"
	"regexp"

	"github.com/influxdata/flux"
	"github.com/influxdata/flux/array"
	"github.com/influxdata/flux/memory"
	"github.com/influxdata/flux/semantic"
	"github.com/influxdata/flux/values"
)

func NewVectorValue(arr array.Interface, typ flux.ColType) values.Vector {
	switch elemType := flux.SemanticType(typ); elemType {
	{{range .}}
	case {{.MonoType}}:
		return New{{.Name}}VectorValue(arr.(*{{.Type}}))
	{{end}}
	default:
		panic(fmt.Errorf("unsupported column data type: %s", typ))
	}
}

func NewVectorFromSlice(values []values.Value, typ flux.ColType) values.Vector {
	switch elemType := flux.SemanticType(typ); elemType {
	{{range .}}
	case {{.MonoType}}:
		mem := memory.DefaultAllocator
		b := array.New{{.Name}}Builder(mem)
		for _, v := range values {
			b.Append(v.{{.ValueType}}())
		}
		arr := b.New{{.Name}}Array()
		return New{{.Name}}VectorValue(arr)
	{{end}}
	default:
		panic(fmt.Errorf("unsupported column data type: %s", typ))
	}
}

{{range .}}
var _ values.Value = {{.Name}}VectorValue{}
var _ values.Vector = {{.Name}}VectorValue{}

type {{.Name}}VectorValue struct {
	arr *{{.Type}}
	typ semantic.MonoType
	et  semantic.MonoType
}

func New{{.Name}}VectorValue(arr *{{.Type}}) values.Vector {
	return {{.Name}}VectorValue{
		arr: arr,
		typ: semantic.NewVectorType({{.MonoType}}),
		et: {{.MonoType}},
	}
}

func (v {{.Name}}VectorValue) ElementType() semantic.MonoType { return v.et }

func (v {{.Name}}VectorValue) Type() semantic.MonoType { return v.typ }
func (v {{.Name}}VectorValue) IsNull() bool { return false }
func (v {{.Name}}VectorValue) Str() string { panic(values.UnexpectedKind(semantic.Vector, semantic.String)) }
func (v {{.Name}}VectorValue) Bytes() []byte { panic(values.UnexpectedKind(semantic.Vector, semantic.Bytes)) }
func (v {{.Name}}VectorValue) Int() int64 { panic(values.UnexpectedKind(semantic.Vector, semantic.Int)) }
func (v {{.Name}}VectorValue) UInt() uint64 { panic(values.UnexpectedKind(semantic.Vector, semantic.UInt)) }
func (v {{.Name}}VectorValue) Float() float64 { panic(values.UnexpectedKind(semantic.Vector, semantic.Float)) }
func (v {{.Name}}VectorValue) Bool() bool { panic(values.UnexpectedKind(semantic.Vector, semantic.Bool)) }
func (v {{.Name}}VectorValue) Time() values.Time { panic(values.UnexpectedKind(semantic.Vector, semantic.Time)) }
func (v {{.Name}}VectorValue) Duration() values.Duration { panic(values.UnexpectedKind(semantic.Vector, semantic.Duration)) }
func (v {{.Name}}VectorValue) Regexp() *regexp.Regexp { panic(values.UnexpectedKind(semantic.Vector, semantic.Regexp)) }
func (v {{.Name}}VectorValue) Array() values.Array { panic(values.UnexpectedKind(semantic.Vector, semantic.Array)) }
func (v {{.Name}}VectorValue) Object() values.Object { panic(values.UnexpectedKind(semantic.Vector, semantic.Object)) }
func (v {{.Name}}VectorValue) Function() values.Function { panic(values.UnexpectedKind(semantic.Vector, semantic.Function)) }
func (v {{.Name}}VectorValue) Dict() values.Dictionary { panic(values.UnexpectedKind(semantic.Vector, semantic.Dictionary)) }

func (v {{.Name}}VectorValue) Equal(other values.Value) bool {
	otherv, ok := other.({{.Name}}VectorValue)
	if !ok {
		return false
	}
	if otherv.Type().Nature() != semantic.Vector {
		return false
	} else if v.Len() != otherv.Len() {
		return false
	}

	for i, n := 0, v.arr.Len(); i < n; i++ {
		if !v.Get(i).Equal(otherv.Get(i)) {
			return false
		}
	}
	return true
}
func (v {{.Name}}VectorValue) Get(i int) values.Value {
	if v.arr.IsNull(i) {
		return values.Null
	}
	return values.New(v.arr.{{.Value}}(i))
}

func (v {{.Name}}VectorValue) Set(i int, value values.Value) { panic("cannot set value on immutable vector") }
func (v {{.Name}}VectorValue) Append(value values.Value) { panic("cannot append to immutable vector") }

func (v {{.Name}}VectorValue) Len() int { return v.arr.Len() }
func (v {{.Name}}VectorValue) Range(f func(i int, v values.Value)) {
	for i, n := 0, v.arr.Len(); i < n; i++ {
		f(i, v.Get(i))
	}
}

func (v {{.Name}}VectorValue) Sort(f func(i values.Value, j values.Value) bool) { panic("cannot sort immutable vector") }
{{end}}
